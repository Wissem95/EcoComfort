# Docker Compose file for EcoComfort IoT Energy Management System

services:
  # Laravel Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecocomfort_backend
    restart: unless-stopped
    working_dir: /var/www
    environment:
      - APP_ENV=${APP_ENV:-production}
      - APP_KEY=${APP_KEY}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=ecocomfort
      - DB_USERNAME=ecocomfort
      - DB_PASSWORD=${DB_PASSWORD:-ecocomfort_secret}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MQTT_HOST=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=${MQTT_USERNAME:-ecocomfort}
      - MQTT_PASSWORD=${MQTT_PASSWORD:-mqtt_secret}
      - REVERB_HOST=reverb
      - REVERB_PORT=8080
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./storage/logs:/var/www/storage/logs
    networks:
      - ecocomfort
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mosquitto:
        condition: service_healthy

  # React PWA Frontend  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8000/api}
        - VITE_WS_URL=${VITE_WS_URL:-ws://localhost:8080}
        - VITE_WS_HOST=${VITE_WS_HOST:-localhost}
        - VITE_WS_PORT=${VITE_WS_PORT:-8080}
        - VITE_APP_KEY=${VITE_APP_KEY:-app-key}
    container_name: ecocomfort_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8000/api}
      - VITE_WS_URL=${VITE_WS_URL:-ws://localhost:8080}
      - VITE_WS_HOST=${VITE_WS_HOST:-localhost}
      - VITE_WS_PORT=${VITE_WS_PORT:-8080}
      - VITE_APP_KEY=${VITE_APP_KEY:-app-key}
    volumes:
      - frontend_dist:/app/dist
    networks:
      - ecocomfort

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: ecocomfort_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf
      - ./docker/ssl:/etc/ssl/certs
      - frontend_dist:/var/www/frontend/dist
      - nginx_logs:/var/log/nginx
    networks:
      - ecocomfort
    depends_on:
      - backend
      - frontend
    environment:
      - DOMAIN=${DOMAIN:-localhost}

  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: ecocomfort_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ecocomfort
      - POSTGRES_USER=ecocomfort  
      - POSTGRES_PASSWORD=${DB_PASSWORD:-ecocomfort_secret}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - postgres_logs:/var/log/postgresql
    networks:
      - ecocomfort
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecocomfort -d ecocomfort"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queues with persistence
  redis:
    image: redis:7-alpine
    container_name: ecocomfort_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - ecocomfort
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # MQTT Broker with Security
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: ecocomfort_mqtt
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "8883:8883" # SSL/TLS port
      - "9001:9001" # WebSocket
    volumes:
      - ./docker/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./docker/mosquitto/passwd:/mosquitto/config/passwd
      - ./docker/ssl:/mosquitto/certs
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
    networks:
      - ecocomfort
    environment:
      - MQTT_USERNAME=${MQTT_USERNAME:-ecocomfort}
      - MQTT_PASSWORD=${MQTT_PASSWORD:-mqtt_secret}
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_sub -h localhost -t '$$SYS/broker/uptime' -C 1 -u ${MQTT_USERNAME:-ecocomfort} -P ${MQTT_PASSWORD:-mqtt_secret}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Laravel Reverb WebSocket Server
  reverb:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecocomfort_reverb
    restart: unless-stopped
    working_dir: /var/www
    command: php artisan reverb:start --host=0.0.0.0 --port=8080
    ports:
      - "8080:8080"
    volumes:
      - ./:/var/www
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - REVERB_APPS_PROVIDER=config
    networks:
      - ecocomfort
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy

  # Queue Workers
  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecocomfort_queue
    restart: unless-stopped
    working_dir: /var/www
    command: >
      sh -c "
        php artisan config:cache &&
        php artisan queue:work redis --sleep=3 --tries=3 --max-time=3600 --timeout=60
      "
    volumes:
      - ./:/var/www
      - ./storage/logs:/var/www/storage/logs
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis
    networks:
      - ecocomfort
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy

  # MQTT Listener Service
  mqtt-listener:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecocomfort_mqtt_listener
    restart: unless-stopped
    working_dir: /var/www
    command: >
      sh -c "
        php artisan config:cache &&
        php artisan mqtt:listen
      "
    volumes:
      - ./:/var/www
      - ./storage/logs:/var/www/storage/logs
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MQTT_HOST=mosquitto
      - MQTT_USERNAME=${MQTT_USERNAME:-ecocomfort}
      - MQTT_PASSWORD=${MQTT_PASSWORD:-mqtt_secret}
    networks:
      - ecocomfort
    depends_on:
      backend:
        condition: service_started
      mosquitto:
        condition: service_healthy
      postgres:
        condition: service_healthy

  # Scheduler for Laravel Cron Jobs
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecocomfort_scheduler
    restart: unless-stopped
    working_dir: /var/www
    command: >
      sh -c "
        php artisan config:cache &&
        while true; do
          php artisan schedule:run --verbose --no-interaction &
          sleep 60
        done
      "
    volumes:
      - ./:/var/www
      - ./storage/logs:/var/www/storage/logs
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - ecocomfort
    depends_on:
      backend:
        condition: service_started

networks:
  ecocomfort:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  postgres_logs:
    driver: local
  redis_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_log:
    driver: local
  frontend_dist:
    driver: local
  nginx_logs:
    driver: local