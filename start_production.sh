#!/bin/bash

# SCRIPT DE D√âMARRAGE PRODUCTION COMPL√àTE - EcoComfort

PROJECT_DIR="/Users/wissem/Ecoconfort"
cd $PROJECT_DIR

echo "üöÄ D√âMARRAGE PRODUCTION EcoComfort"
echo "=================================="
echo "üìÖ $(date)"
echo ""

# Function pour d√©marrer un service en arri√®re-plan
start_service() {
    local service_name="$1"
    local command="$2"
    local log_file="$3"
    
    echo "üîÑ D√©marrage $service_name..."
    eval "$command" > "$log_file" 2>&1 &
    local pid=$!
    echo "‚úÖ $service_name d√©marr√© (PID: $pid) - Logs: $log_file"
    return $pid
}

echo "1Ô∏è‚É£ LARAVEL SERVER"
start_service "Laravel API" "php artisan serve" "/tmp/laravel-server.log"

echo ""
echo "2Ô∏è‚É£ WEBSOCKET REVERB"
start_service "WebSocket Reverb" "php artisan reverb:start" "/tmp/websocket-reverb.log"

echo ""
echo "3Ô∏è‚É£ FRONTEND REACT"
cd frontend
start_service "Frontend React" "npm run dev" "/tmp/frontend-react.log"
cd ..

echo ""
echo "4Ô∏è‚É£ BRIDGE MQTT PERMANENT"
start_service "Bridge MQTT Permanent" "./bridge_permanent.sh" "/tmp/bridge-startup.log"

echo ""
echo "üéØ SERVICES D√âMARR√âS"
echo "===================="
echo "‚Ä¢ Laravel API:     http://localhost:8000"
echo "‚Ä¢ Frontend:        http://localhost:5173"  
echo "‚Ä¢ WebSocket:       ws://localhost:8080"
echo "‚Ä¢ Bridge MQTT:     Pi ‚Üí HiveMQ Cloud + Database"
echo ""
echo "üìã LOGS:"
echo "‚Ä¢ Laravel:         tail -f /tmp/laravel-server.log"
echo "‚Ä¢ WebSocket:       tail -f /tmp/websocket-reverb.log"
echo "‚Ä¢ Frontend:        tail -f /tmp/frontend-react.log"
echo "‚Ä¢ Bridge:          tail -f /tmp/ecocomfort-bridge-permanent.log"
echo ""
echo "üõë ARR√äT COMPLET:"
echo "‚Ä¢ pkill -f 'artisan serve'"
echo "‚Ä¢ pkill -f 'artisan reverb'"
echo "‚Ä¢ pkill -f 'npm run dev'"
echo "‚Ä¢ pkill -f 'bridge_permanent.sh'"
echo ""
echo "‚úÖ EcoComfort Production Ready !"
echo "üìä Donn√©es temps r√©el: RuuviTag ‚Üí Frontend + Coll√®gues (HiveMQ)"